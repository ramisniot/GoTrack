LabeledMarker.prototype = new google.maps.OverlayView();

function LabeledMarker(map, latlng, options){
  this.latlng = latlng;
  this.labelText = options.labelText || "";
  this.labelClass = options.labelClass || "marker-label";
  this.labelOffset = options.labelOffset || new google.maps.Size(0, 0);
  this.googleMarker = options.googleMarker || new google.maps.Marker(new google.maps.LatLng(0,0));
  this.icon = options.icon;
	this.point = options.point;
	this.id = options.id;
	this.zIndex = options.zIndex;
	this.shadowImage = options.shadowImage || '<%= image_path("ublip_marker_shadow.png") %>';
	this.html = options.html;

  this.div_ = null;

  // Explicitly call setMap on this overlay
  this.setMap(map);
}

LabeledMarker.prototype.onAdd = function() {

  // Note: an overlay's receipt of add() indicates that
  // the map's panes are now available for attaching
  // the overlay to the map via the DOM.

  // Create the DIV and set some basic attributes.
  var div = document.createElement('DIV');
  div.className = this.labelClass;
  div.innerHTML = this.labelText;
  div.style.position = "absolute";

	this.googleMarker = new google.maps.Marker({
		position: this.point,
		icon: this.icon,
		zIndex: this.zIndex,
		clickable: true,
		shadow: new google.maps.MarkerImage(this.shadowImage, null, null, new google.maps.Point(11, 34))
	});
	this.googleMarker.id = this.id; // Assign a unique id to the marker
	this.googleMarker.setMap(this.getMap());

	var f = function(marker){ //this closure allows the event handler to access a local variable
		google.maps.event.addDomListener(marker, "click", function() {
			focusOnAndFollow(marker.id);
		});
	};
	f(this.googleMarker);


	if(window.deviceLookupHash == null)
		window.deviceLookupHash = {};

	window.deviceLookupHash[this.googleMarker.id] = this.googleMarker;


  // Set the overlay's div_ property to this DIV
  this.div_ = div;

  // We add an overlay to a map via one of the map's panes.
  // We'll add this overlay to the overlayImage pane.
  var panes = this.getPanes();
  panes.floatShadow.appendChild(this.div_);
}


LabeledMarker.prototype.draw = function() {
  var overlayProjection = this.getProjection();

  // Calculate the DIV coordinates of two opposite corners of our bounds to
  // get the size and position of our rectangle
  var p = overlayProjection.fromLatLngToDivPixel(this.latlng);
  var z = this.googleMarker.getZIndex(this.latlng.lat());

  // Now position our DIV based on the DIV coordinates of our bounds
  this.div_.style.left = (p.x + 6) + "px";
  this.div_.style.top = (p.y - 15) + "px";
  this.div_.style.zIndex = z + 1; // in front of the marker
}

LabeledMarker.prototype.onRemove = function() {
  if (this.div_) {
    this.div_.parentNode.removeChild(this.div_);
    this.googleMarker.setMap(null);
  }
}

// Note that the visibility property must be a string enclosed in quotes
LabeledMarker.prototype.hide = function() {
  if (this.div_) {
    this.div_.style.visibility = "hidden";
    this.googleMarker.setMap(null);
  }
}

LabeledMarker.prototype.show = function() {
  if (this.div_) {
    this.div_.style.visibility = "visible";
    this.googleMarker.setMap(this.map_);
  }
}

LabeledMarker.prototype.toggle = function() {
  if (this.div_) {
    if (this.div_.style.visibility == "hidden") {
      this.googleMarker.setMap(this.map_);
      this.show();
    } else {
      this.googleMarker.setMap(null);
      this.hide();
    }
  }
}

LabeledMarker.prototype.toggleDOM = function() {
  if (this.getMap()) {
    this.setMap(null);
  } else {
    this.setMap(this.map_);
  }
}
